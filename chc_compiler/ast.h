#ifndef AST_H
#define AST_H



//This is just for var list in terminator

struct var_list
{
	char *id;
	struct var_list *next;
};







/*
	Abstract Syntax Tree used for program parsing.
	Generated by the Bison-generated parser

	At this level, ignore frontend types and use internal types for portability
	(re-defining tokens as needed here)
*/

enum node_type {PROGRAM, SCOPE, CONSTANT, DATUM, OPERATOR, EXPANSION, INPUT, OUTPUT, MAPIN, MAPOUT, TERMINATOR};


//operator specific types
enum operator {PLUS, TIMES, ISEQUAL, ISLESS, ISGREATER, IF, ELSE, MINUS, MERGE, END};


//helper function for scanner: converts operator strings to internal types
enum operator convert_operators(char *n);

/*
	PROGRAM
	SCOPE
	OPERATOR
	EXPANSION
	INPUT
		Terminal node: defines variable input
	OUTPUT
		Terminal node: defines value output
	CONSTANT
		Terminal node: defines an initialized variable
	DATUM
		Terminal node: defines a variable
*/
struct ast_node
{
	//type of current node 
	enum node_type	type;
	//value of the node, if known (e.g., constant)
	int value;
	//variable name if DATUM or CONSTANT, corresponding variable if INPUT/OUTPUT
	//subgraph (to expand) name if EXPANSION
	//name of subgraph if SCOPE
	char *name;

	//here we'll keep operator specific and expansion specific data
	union 
	{
		struct
		{
			enum operator op;
			char *dest;
			char *arg1;
			char *arg2;
		} op_args;
		struct
		{
			char *inner;
			char *outer;
		} exp_args;
	}op_exp;

	//only for terminator
	struct var_list *end_vars;

	//pointer down in the hierarchy (syntax): e.g., scope to statement
	struct ast_node *down;
	//pointer to same hierarchical level: e.g., statement to statement
	struct ast_node *side;
};

struct ast_node *new_datum_ast_node(char *n);
struct ast_node *new_const_ast_node(char *n, int v);
struct ast_node *new_input_ast_node(char *n);
struct ast_node *new_output_ast_node(char *n);
struct ast_node *new_subgraph_ast_node(char *n);
struct ast_node *new_program_ast_node();
struct ast_node *new_operator_ast_node(enum operator op, char *d, char *s1, char *s2);
struct ast_node *new_mapping_ast_node(enum node_type map, char *i, char *o);
struct ast_node *new_expansion_ast_node(char * n, struct ast_node *m);

struct ast_node *new_terminator_ast_node(char * n,struct var_list *list);


#endif